# backend.py
import sqlite3
from typing import List, Dict, Optional, Tuple

class DatabaseManager:
    def __init__(self, db_path: str = "cordimap.db"):
        """Initialize database connection and ensure tables exist."""
        self.conn = sqlite3.connect(db_path)
        self.conn.row_factory = sqlite3.Row  # Enable dictionary-style access
        self._create_tables()
    
    def _create_tables(self) -> None:
        """Create all tables if they don't exist."""
        schema = """
        CREATE TABLE IF NOT EXISTS provinces (
            province_id INTEGER PRIMARY KEY,
            province_name TEXT UNIQUE NOT NULL,
            information TEXT
        );
        
        CREATE TABLE IF NOT EXISTS languages_dialects (
            language_id INTEGER PRIMARY KEY,
            language_name TEXT UNIQUE NOT NULL
        );
        
        CREATE TABLE IF NOT EXISTS municipalities (
            municipality_id INTEGER PRIMARY KEY,
            province_id INTEGER NOT NULL,
            municipality_name TEXT NOT NULL,
            information TEXT,
            FOREIGN KEY (province_id) REFERENCES provinces(province_id),
            UNIQUE(province_id, municipality_name)
        );
        
        CREATE TABLE IF NOT EXISTS province_languages (
            province_id INTEGER NOT NULL,
            language_id INTEGER NOT NULL,
            percentage_value REAL NOT NULL,
            PRIMARY KEY (province_id, language_id),
            FOREIGN KEY (province_id) REFERENCES provinces(province_id),
            FOREIGN KEY (language_id) REFERENCES languages_dialects(language_id)
        );
        
        CREATE TABLE IF NOT EXISTS municipality_languages (
            municipality_id INTEGER NOT NULL,
            language_id INTEGER NOT NULL,
            percentage_value REAL NOT NULL,
            PRIMARY KEY (municipality_id, language_id),
            FOREIGN KEY (municipality_id) REFERENCES municipalities(municipality_id),
            FOREIGN KEY (language_id) REFERENCES languages_dialects(language_id)
        );
        
        CREATE TABLE IF NOT EXISTS phrases (
            phrase_id INTEGER PRIMARY KEY,
            language_id INTEGER NOT NULL,
            language_phrase TEXT NOT NULL,
            english_phrase TEXT NOT NULL,
            FOREIGN KEY (language_id) REFERENCES languages_dialects(language_id)
        );
        """
        self.conn.executescript(schema)
        self.conn.commit()

    # ===== PROVINCE METHODS =====
    def get_provinces(self) -> List[Dict]:
        """Get all provinces with basic info."""
        cursor = self.conn.execute("""
            SELECT province_id, province_name 
            FROM provinces ORDER BY province_name
        """)
        return [dict(row) for row in cursor]

    def get_province_details(self, province_id: int) -> Optional[Dict]:
        """Get full province information including languages."""
        cursor = self.conn.execute("""
            SELECT p.*, 
                   GROUP_CONCAT(ld.language_name) AS languages,
                   GROUP_CONCAT(pl.percentage_value) AS language_percentages
            FROM provinces p
            LEFT JOIN province_languages pl ON p.province_id = pl.province_id
            LEFT JOIN languages_dialects ld ON pl.language_id = ld.language_id
            WHERE p.province_id = ?
            GROUP BY p.province_id
        """, (province_id,))
        result = cursor.fetchone()
        return dict(result) if result else None

    # ===== MUNICIPALITY METHODS =====
    def get_municipality_info(self, municipality_name):
        """Get the information/description for a specific municipality."""
        query = """
            SELECT information
            FROM municipalities
            WHERE LOWER(municipality_name) = LOWER(%s)
            LIMIT 1;
        """
        self.cur.execute(query, (municipality_name,))
        return self.cur.fetchone()


    def get_municipalities(self, province_id: int) -> List[Dict]:
        """Get all municipalities for a province."""
        cursor = self.conn.execute("""
            SELECT municipality_id, municipality_name 
            FROM municipalities 
            WHERE province_id = ?
            ORDER BY municipality_name
        """, (province_id,))
        return [dict(row) for row in cursor]

    def get_municipality_details(self, municipality_id: int) -> Optional[Dict]:
        """Get full municipality info with language data."""
        cursor = self.conn.execute("""
            SELECT m.*, p.province_name,
                   GROUP_CONCAT(ld.language_name) AS languages,
                   GROUP_CONCAT(ml.percentage_value) AS language_percentages
            FROM municipalities m
            JOIN provinces p ON m.province_id = p.province_id
            LEFT JOIN municipality_languages ml ON m.municipality_id = ml.municipality_id
            LEFT JOIN languages_dialects ld ON ml.language_id = ld.language_id
            WHERE m.municipality_id = ?
            GROUP BY m.municipality_id
        """, (municipality_id,))
        result = cursor.fetchone()
        return dict(result) if result else None

    # ===== LANGUAGE METHODS =====
    def get_language_phrases(self, language_id: int) -> List[Dict]:
        """Get common phrases for a language."""
        cursor = self.conn.execute("""
            SELECT language_phrase, english_phrase 
            FROM phrases 
            WHERE language_id = ?
        """, (language_id,))
        return [dict(row) for row in cursor]

    def get_languages_by_location(self, location_type: str, location_id: int) -> List[Dict]:
        """
        Get languages spoken in a location (province/municipality).
        :param location_type: 'province' or 'municipality'
        :param location_id: ID of the location
        """
        if location_type == 'province':
            table = 'province_languages'
            id_col = 'province_id'
        else:
            table = 'municipality_languages'
            id_col = 'municipality_id'

        cursor = self.conn.execute(f"""
            SELECT ld.language_id, ld.language_name, pl.percentage_value
            FROM languages_dialects ld
            JOIN {table} pl ON ld.language_id = pl.language_id
            WHERE pl.{id_col} = ?
            ORDER BY pl.percentage_value DESC
        """, (location_id,))
        return [dict(row) for row in cursor]

    # ===== SEARCH FUNCTIONALITY =====
    def search_locations(self, query: str) -> List[Dict]:
        """Search across provinces and municipalities."""
        cursor = self.conn.execute("""
            SELECT 'province' AS type, province_id AS id, province_name AS name
            FROM provinces 
            WHERE province_name LIKE ? || '%'
            
            UNION ALL
            
            SELECT 'municipality' AS type, municipality_id AS id, municipality_name AS name
            FROM municipalities 
            WHERE municipality_name LIKE ? || '%'
            
            ORDER BY name
        """, (query, query))
        return [dict(row) for row in cursor]

    # ===== DATA IMPORT HELPERS =====
    def add_province(self, name: str, information: str = None) -> int:
        """Add a new province, returns province_id."""
        cursor = self.conn.execute("""
            INSERT INTO provinces (province_name, information)
            VALUES (?, ?)
            RETURNING province_id
        """, (name, information))
        self.conn.commit()
        return cursor.fetchone()[0]

    def add_language(self, name: str) -> int:
        """Add a language/dialect, returns language_id."""
        cursor = self.conn.execute("""
            INSERT INTO languages_dialects (language_name)
            VALUES (?)
            RETURNING language_id
        """, (name,))
        self.conn.commit()
        return cursor.fetchone()[0]

    # ... (similar methods for other tables)

    def close(self) -> None:
        """Close database connection."""
        self.conn.close()

    # Context manager support
    def __enter__(self):
        return self
        
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.close()